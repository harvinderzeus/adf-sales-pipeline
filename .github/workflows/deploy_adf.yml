name: Build and Deploy ADF from Dev to UAT
on:
  push:
    branches:
      - develop
  workflow_dispatch:  # Allows manual triggering

jobs:
  deploy-adf:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # First, let's check the contents of the ARM template
    - name: Check ARM Template Content
      run: |
        echo "Examining ARM template content..."
        jq '.resources[].name' ./SalesPipelineFactoryDev/factory/SalesPipelineFactoryDev_ARMTemplateForFactory.json | grep -i factory || echo "No direct factory name found"
    
    # Create a properly sanitized parameters file for UAT
    - name: Prepare UAT Parameters
      run: |
        # Install jq if not already available
        apt-get update && apt-get install -y jq
        
        # Copy the original parameter file
        cp ./SalesPipelineFactoryDev/factory/SalesPipelineFactoryDev_ARMTemplateParametersForFactory.json ./UAT_ARMTemplateParameters.json
        
        # Sanitize the ADF_NAME_UAT value to ensure it doesn't contain invalid characters
        UAT_FACTORY_NAME="${{ secrets.ADF_NAME_UAT }}"
        SANITIZED_NAME=$(echo "$UAT_FACTORY_NAME" | tr -d '%&\\?/')
        
        # Use jq to update the factoryName parameter for UAT
        jq --arg name "$SANITIZED_NAME" '.parameters.factoryName.value = $name' ./UAT_ARMTemplateParameters.json > ./temp.json && mv ./temp.json ./UAT_ARMTemplateParameters.json
        
        echo "Modified parameters file for UAT:"
        cat ./UAT_ARMTemplateParameters.json

    # Try to deploy using global parameters directly, not via parameter file
    - name: Deploy ADF ARM Template
      id: deploy
      uses: azure/arm-deploy@v1
      with:
        scope: "resourcegroup"
        resourceGroupName: ${{ secrets.ADF_RESOURCE_GROUP }}
        template: "./SalesPipelineFactoryDev/factory/SalesPipelineFactoryDev_ARMTemplateForFactory.json"
        parameters: factoryName="${{ secrets.ADF_NAME_UAT }}" dataFactory_location="eastus" dataFactory_identity_type="SystemAssigned"
        deploymentName: "ADF-UAT-Deployment-${{ github.run_id }}"
        deploymentMode: Incremental
        failOnStdErr: false
        
    - name: Check Deployment Status
      run: |
        DEPLOYMENT_NAME="ADF-UAT-Deployment-${{ github.run_id }}"
        DEPLOYMENT_STATUS=$(az deployment group show --name "$DEPLOYMENT_NAME" --resource-group ${{ secrets.ADF_RESOURCE_GROUP }} --query "properties.provisioningState" -o tsv)
        
        echo "Deployment status: $DEPLOYMENT_STATUS"
        if [ "$DEPLOYMENT_STATUS" != "Succeeded" ]; then
          echo "Deployment failed or had issues. Getting detailed error information..."
          az deployment operation list --resource-group ${{ secrets.ADF_RESOURCE_GROUP }} --deployment-name "$DEPLOYMENT_NAME" --query "[?properties.provisioningState=='Failed'].{operation: properties.targetResource.resourceType, resourceName: properties.targetResource.resourceName, error: properties.statusMessage}" -o json
          exit 1
        fi
        
    - name: Verify ADF Resources
      if: success()
      run: |
        echo "Verifying ADF resources were deployed correctly..."
        az datafactory pipeline list --factory-name ${{ secrets.ADF_NAME_UAT }} --resource-group ${{ secrets.ADF_RESOURCE_GROUP }} --query "[].name" -o tsv
        echo "Deployment to UAT completed successfully."