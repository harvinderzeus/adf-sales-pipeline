name: Build and Deploy ADF from Dev to UAT
on:
  push:
    branches:
      - develop
  workflow_dispatch:  # Allows manual triggering

jobs:
  deploy-adf:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Set up Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az --version
        
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # First, check if the template is using parameters correctly
    - name: Check ARM Template Content
      run: |
        echo "Examining ARM template content..."
        grep -r "factoryName" ./SalesPipelineFactoryDev/factory/SalesPipelineFactoryDev_ARMTemplateForFactory.json || echo "factoryName not found in template"
    
    # Create a modified parameters file for UAT without using jq
    - name: Prepare UAT Parameters
      run: |
        # Create a new parameters file directly
        echo '{
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentParameters.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {
            "factoryName": {
              "value": "${{ secrets.ADF_NAME_UAT }}"
            },
            "dataFactory_location": {
              "value": "eastus"
            },
            "dataFactory_identity_type": {
              "value": "SystemAssigned"
            }
          }
        }' > ./UAT_ARMTemplateParameters.json
        
        echo "Created parameters file for UAT:"
        cat ./UAT_ARMTemplateParameters.json
        
        # Verify the UAT factory name is set
        echo "Checking if UAT factory name is properly set:"
        echo "UAT factory name: ${{ secrets.ADF_NAME_UAT }}"

    # Deploy using Azure CLI directly for more control
    - name: Deploy ADF ARM Template
      run: |
        echo "Starting deployment to UAT..."
        DEPLOYMENT_NAME="ADF-UAT-Deployment-${{ github.run_id }}"
        
        # Deploy using Azure CLI
        az deployment group create \
          --name "$DEPLOYMENT_NAME" \
          --resource-group "${{ secrets.ADF_RESOURCE_GROUP }}" \
          --template-file "./SalesPipelineFactoryDev/factory/SalesPipelineFactoryDev_ARMTemplateForFactory.json" \
          --parameters factoryName="${{ secrets.ADF_NAME_UAT }}" \
                       dataFactory_location="eastus" \
                       dataFactory_identity_type="SystemAssigned" \
          --verbose
        
    - name: Check Deployment Status
      run: |
        DEPLOYMENT_NAME="ADF-UAT-Deployment-${{ github.run_id }}"
        echo "Checking deployment status for $DEPLOYMENT_NAME..."
        
        DEPLOYMENT_STATUS=$(az deployment group show \
          --name "$DEPLOYMENT_NAME" \
          --resource-group "${{ secrets.ADF_RESOURCE_GROUP }}" \
          --query "properties.provisioningState" -o tsv)
        
        echo "Deployment status: $DEPLOYMENT_STATUS"
        
        if [ "$DEPLOYMENT_STATUS" != "Succeeded" ]; then
          echo "Deployment failed. Getting error details..."
          az deployment group show \
            --name "$DEPLOYMENT_NAME" \
            --resource-group "${{ secrets.ADF_RESOURCE_GROUP }}" \
            --query "properties.error" -o json
          
          echo "Checking individual operations for more details..."
          az deployment operation list \
            --resource-group "${{ secrets.ADF_RESOURCE_GROUP }}" \
            --deployment-name "$DEPLOYMENT_NAME" \
            --query "[?properties.provisioningState=='Failed'].{operation: properties.targetResource.resourceType, resourceName: properties.targetResource.resourceName, error: properties.statusMessage}" \
            -o json
          
          exit 1
        fi
        
    - name: Verify ADF Resources
      if: success()
      run: |
        echo "Verifying ADF resources were deployed correctly..."
        echo "Listing pipelines in UAT factory: ${{ secrets.ADF_NAME_UAT }}"
        az datafactory pipeline list \
          --factory-name "${{ secrets.ADF_NAME_UAT }}" \
          --resource-group "${{ secrets.ADF_RESOURCE_GROUP }}" \
          --query "[].name" -o tsv
        
        echo "Deployment to UAT completed successfully."